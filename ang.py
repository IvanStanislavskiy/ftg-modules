
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InlineKeyboardButton,
    InputTextMessageContent,
)
from asyncio import sleep
from telethon.tl.types import Message
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.utils import get_display_name
from .. import loader  # noqa
import logging
from ..inline import GeekInlineQuery, rand  # noqa
from .. import utils  # noqa

logger = logging.getLogger(__name__)

ua = [
    "–±—ã–ª üîá –æ–±–µ–∑–∑–≤—É—á–µ–Ω"
]


class AirAlertMod(loader.Module):
    """üá∫üá¶ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–∑–¥—É—à–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ.
    –ù—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ @air_alert_ua –∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –±–æ—Ç–µ"""

    strings = {"name": "AirAlert", "author": "morisummermods"}

    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client
        self.regions = db.get(self.strings["name"], "regions", [])
        self.bot_id = (await self.inline.bot.get_me()).id
        self.nametag = db.get(self.strings["name"], "nametag", "")
        self.forwards = db.get(self.strings["name"], "forwards", [])
        self.me = (await client.get_me()).id
        try:
            await client(
                JoinChannelRequest(await self.client.get_entity("t.me/air_alert_ua"))
            )
        except Exception:
            logger.error("Can't join t.me/air_alert_ua")
        try:
            channel = await self.client.get_entity(f"t.me/{self.strings['author']}")
            await client(JoinChannelRequest(channel))
        except Exception:
            logger.error(f"Can't join {self.strings['author']}")
        try:
            post = (await client.get_messages(self.strings["author"], ids=[15]))[0]
            await post.react("‚ù§Ô∏è")
        except Exception:
            logger.error(f"Can't react to t.me/{self.strings['author']}")

    async def alertforwardcmd(self, message: Message) -> None:
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã.
        –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —á–∞—Ç.
        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—á–∫–∏ –≤–≤–µ–¥–∏—Ç–µ .alertforward set <text>"""
        text = utils.get_args_raw(message)
        if text[:3] == "set":
            self.nametag = text[4:]
            self.db.set(self.strings["name"], "nametag", self.nametag)
            return await utils.answer(
                message,
                f"üè∑ <b>–¢–∞–±–ª–∏—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <code>{self.nametag}</code></b>",
            )
        if not text:
            chats = "<b>–¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: </b>\n"
            for chat in self.forwards:
                chats += f"{get_display_name(await self.client.get_entity(chat))}\n"
            await utils.answer(message, chats)
            return
        try:
            chat = (await self.client.get_entity(text.replace("https://", ""))).id
        except Exception:
            await utils.answer(message, "<b>–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
            return
        if chat in self.forwards:
            self.forwards.remove(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(message, "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>")
        else:
            self.forwards.append(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(
                message, "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>"
            )

    async def alert_inline_handler(self, query: GeekInlineQuery) -> None:
        """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤.
        –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ alert all.
        –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã alert my"""
        text = query.args
        if not text:
            result = ua
        elif text == "my":
            result = self.regions
        else:
            result = [region for region in ua if text.lower() in region.lower()]
        if not result:
            await query.e404()
            return
        res = [
            InlineQueryResultArticle(
                id=rand(20),
                title=f"{'‚úÖ' if reg in self.regions else '‚ùå'}{reg if reg != 'all' else '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}",
                description=f"–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã {'—É–¥–∞–ª–∏—Ç—å' if reg in self.regions else '–¥–æ–±–∞–≤–∏—Ç—å'}"
                if reg != "all"
                else f"üá∫üá¶ –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã {'–≤—ã–∫–ª—é—á–∏—Ç—å' if 'all' in self.regions else '–≤–∫–ª—é—á–∏—Ç—å'} –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                input_message_content=InputTextMessageContent(
                    f"‚åõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ <code>{reg}</code>",
                    parse_mode="HTML",
                ),
            )
            for reg in result[:50]
        ]
        await query.answer(res, cache_time=0)

    async def watcher(self, message: Message) -> None:
        if (
                getattr(message, "out", False)
                and getattr(message, "via_bot_id", False)
                and message.via_bot_id == self.bot_id
                and "‚åõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞" in getattr(message, "raw_text", "")
        ):
            self.regions = self.db.get(self.strings["name"], "regions", [])
            region = message.raw_text[25:]
            state = "–¥–æ–±–∞–≤–ª–µ–Ω"
            if region not in self.regions:
                self.regions.append(region)
            else:
                self.regions.remove(region)
                state = "—É–¥–∞–ª–µ–Ω"
            self.db.set(self.strings["name"], "regions", self.regions)
            try:
                e = await self.client.get_entity("t.me/air_alert_ua")
                sub = not e.left
            except Exception:
                sub = False
            n = "\n"
            res = f"<b>–†–µ–≥–∏–æ–Ω <code>{region}</code> —É—Å–ø–µ—à–Ω–æ {state}</b>{n}"
            if not sub:
                res += (
                    "<b>–ù–ï –í–´–•–û–î–ò –° @air_alert_ua (–∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç)</b>"
                )
                await self.client(
                    JoinChannelRequest(
                        await self.client.get_entity("t.me/air_alert_ua")
                    )
                )
            await self.inline.form(res, message=message)
        if (
                getattr(message, "peer_id", False)
                and getattr(message.peer_id, "chat_id", 0) == -1001387610194
                and (
                "all" in self.regions
                or any(reg in message.raw_text for reg in self.regions)
        )
        ):
            for _ in range(3):
                await self.inline.bot.send_message(
                    self.me, message.text, parse_mode="HTML"
                )
                await sleep(1)
            for chat in self.forwards:
                await self.client.send_message(
                    chat, message.text + "\n\n" + self.nametag
                )
        return
